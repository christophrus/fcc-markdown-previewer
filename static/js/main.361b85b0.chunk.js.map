{"version":3,"sources":["components/Box.js","App.js","serviceWorker.js","index.js"],"names":["Box","string","_this","this","classes","props","isHidden","isMaximized","icon","react_default","a","createElement","className","name","charAt","toUpperCase","slice","onClick","onToggle","children","Component","defaultProps","state","renderer","marked","Renderer","link","href","title","text","concat","defaultInput","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","editor","preview","inputText","handleChange","bind","assertThisInitialized","handleToggle","e","setState","target","value","assign","renderedText","__html","breaks","components_Box","id","onChange","dangerouslySetInnerHTML","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.361b85b0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nfunction capitalize(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nclass Box extends Component {\r\n\r\n    render() {\r\n        \r\n        let classes = this.props.isHidden ? \"hidden\" : this.props.isMaximized ? \"w-full shadow h-screen resize-y bg-orange maximized\" : \"w-4/5 mx-6 my-2 shadow-lg resize-y bg-orange\";\r\n        let icon = this.props.isMaximized ? \"fa fa-window-restore\" : \"fa fa-window-maximize\"\r\n\r\n        return(\r\n            <div className={classes}>\r\n                <div className=\"w-full h-8 p-2 flex items-center justify-between shadow bg-orange-dark\">\r\n                    <span className=\"text-orange-darkest\"><h2>{capitalize(this.props.name)}</h2></span>\r\n                    <span className=\"\" onClick={() => this.props.onToggle(this.props.name)}><i className={icon}></i></span>\r\n                </div>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nBox.defaultProps = {\r\n    name: '',\r\n    state: {\r\n        isMaximized: false,\r\n        isHidden: false\r\n    },\r\n    onToggle: null\r\n}\r\n\r\nexport default Box;","import React, { Component } from 'react';\nimport './App.css';\nimport marked from 'marked';\nimport Box from './components/Box'\n\nvar renderer = new marked.Renderer();\nrenderer.link = (href, title, text)  => `<a target=\"_blank\" href=\"${href}\" title=\"${title}\">${text}</a>`;\n\nconst defaultInput = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        editor: { isHidden: false, isMaximized: false },\n        preview: { isHidden: false, isMaximized: false },\n      inputText: defaultInput,\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({\n      inputText: e.target.value\n    })\n  }\n\n  handleToggle(name) {\n     \n    let state = {\n      editor: Object.assign({}, this.state.editor),\n      preview: Object.assign({}, this.state.preview)\n    } \n\n    state[name].isMaximized = !state[name].isMaximized;\n    state.preview.isHidden = state.editor.isMaximized ? true : false;\n    state.editor.isHidden = state.preview.isMaximized ? true : false;\n\n    this.setState({\n      editor: state.editor, preview: state.preview\n    });\n\n  }\n\n  render() {\n    let renderedText = { __html: marked(this.state.inputText, {breaks: true, renderer: renderer}) };\n\n    return (\n      <main className=\"flex justify-center bg-orange-lightest items-center flex-col\">\n        <Box name=\"editor\" isMaximized={this.state.editor.isMaximized} isHidden={this.state.editor.isHidden} onToggle={this.handleToggle}>\n          <textarea className=\"w-full p-2 min-h-48 bg-transparent\" id=\"editor\" onChange={this.handleChange} value={this.state.inputText}></textarea>\n        </Box>\n        <Box name=\"preview\" isMaximized={this.state.preview.isMaximized} isHidden={this.state.preview.isHidden} onToggle={this.handleToggle}>\n          <div className=\"p-6 w-4/5\" dangerouslySetInnerHTML={renderedText} id=\"preview\"></div>\n        </Box>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/tailwind.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}